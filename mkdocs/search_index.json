{
    "docs": [
        {
            "location": "/", 
            "text": "ReBloom - Bloom Filter Module for Redis\n\n\nThis provides a scalable bloom filter as a Redis data type. Bloom filters\nare probabilistic data structures that do a very good job at quickly\ndetermining if something is contained within a set.\n\n\nBuilding\n\n\nIn order to use this module, build it using \nmake\n and load it into Redis.\n\n\nModule Options\n\n\nYou can adjust the default error ratio and the initial filter size using\nthe \nERROR_RATE\n and \nINITIAL_SIZE\n options respectively when loading the\nmodule, e.g.\n\n\n$ redis-server --loadmodule /path/to/rebloom.so INITIAL_SIZE \n400\n ERROR_RATE \n0\n.004\n\n\n\n\n\nThe default error rate is \n0.01\n and the default initial capacity is \n100\n.", 
            "title": "ReBloom"
        }, 
        {
            "location": "/#rebloom-bloom-filter-module-for-redis", 
            "text": "This provides a scalable bloom filter as a Redis data type. Bloom filters\nare probabilistic data structures that do a very good job at quickly\ndetermining if something is contained within a set.", 
            "title": "ReBloom - Bloom Filter Module for Redis"
        }, 
        {
            "location": "/#building", 
            "text": "In order to use this module, build it using  make  and load it into Redis.", 
            "title": "Building"
        }, 
        {
            "location": "/#module-options", 
            "text": "You can adjust the default error ratio and the initial filter size using\nthe  ERROR_RATE  and  INITIAL_SIZE  options respectively when loading the\nmodule, e.g.  $ redis-server --loadmodule /path/to/rebloom.so INITIAL_SIZE  400  ERROR_RATE  0 .004  The default error rate is  0.01  and the default initial capacity is  100 .", 
            "title": "Module Options"
        }, 
        {
            "location": "/Commands/", 
            "text": "ReBloom Full Command Documentation\n\n\nBF.RESERVE\n\n\nFormat:\n\n\nBF.RESERVE {key} {error_rate} {size}\n\n\n\n\n\nDescription:\n\n\nCreates an empty Bloom Filter with a given error ratio and initial capacity.\nThis command is useful if you intend to add many items to a Bloom Filter, \notherwise you can just use \nBF.ADD\n to add items. It will also create one for\nyou.\n\n\nThe initial size and error rate will dictate the performance and memory usage\nof the filter. In general, the higher the lower the error ratio (i.e. the lower\nthe tolerance for false positives) the greater the space consumption per\nfilter entry.\n\n\nParameters:\n\n\n\n\nkey\n: The key under which the filter is to be found\n\n\nerror_rate\n: The percentage of expected false positives to be tolerated.\n    The greater this number, the greater the memory consumption per item\n    and the more CPU usage per operation.\n\n\nsize\n: The number of entries you intend to to add to the filter.\n    Performance will begin to degrade after adding more items than this\n    number. The actual degradation will depend on how far the limit has\n    been exceeded. Performance will degrade linearly as the number of entries\n    grow exponentially.\n\n\n\n\nComplexity\n\n\nO(1)\n\n\nReturns\n\n\nOK on success, error otherwise.\n\n\nBF.ADD\n\n\nFormat\n\n\nBF.ADD {key} {item}\n\n\n\n\n\nDescription\n\n\nAdds an item to the Bloom Filter, creating the filter if it does not yet exist.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to add\n\n\n\n\nComplexity\n\n\nO(log (size/capacity)).\n\n\nReturns\n\n\n1 if the item was newly inserted, or 0 if it may have existed previously.\n\n\nBF.MADD\n\n\nFormat\n\n\n{key} {item} [item...]\n\n\n\n\n\nDescription\n\n\nAdds one or more items to the Bloom Filter, creating the filter if it does not yet exist.\nThis command operates identally to \nBF.ADD\n except it allows multiple inputs and returns\nmultiple values.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitems\n: One or more items to add\n\n\n\n\nComplexity\n\n\nO(log (size/capacity)).\n\n\nReturns\n\n\nAn array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.\n\n\nBF.EXISTS\n\n\nFormat\n\n\nBF.EXISTS {key} {item}\n\n\n\n\n\nDescription\n\n\nCheck if an item may exists, or certainly does not exist in the Bloom Filter.\n\n\nParameters\n\n\n\n\nkey\n: the name of the filter\n\n\nitem\n: the item to check for\n\n\n\n\nComplexity\n\n\nO(log (size/capacity)).\n\n\nReturns\n\n\n0 If the item certainly does not exist, 1 if the item may exist.\n\n\nBF.MEXISTS\n\n\nFormat\n\n\nBF.MEXISTS {key} {item} [item...]\n\n\n\n\n\nDescription\n\n\nCheck if one or more items exist, or certainly do not exist in the filter\n\n\nParameters\n\n\n\n\nkey\n: name of the filter\n\n\nitems\n: one or more items to check\n\n\n\n\nComplexity\n\n\nO(log (size/capacity)).\n\n\nReturns\n\n\nAn array of boolean values (actually integers). A true value means the\ncorresponding item may exist in the filter, while a false value means it does not.", 
            "title": "Commands"
        }, 
        {
            "location": "/Commands/#rebloom-full-command-documentation", 
            "text": "", 
            "title": "ReBloom Full Command Documentation"
        }, 
        {
            "location": "/Commands/#bfreserve", 
            "text": "", 
            "title": "BF.RESERVE"
        }, 
        {
            "location": "/Commands/#format", 
            "text": "BF.RESERVE {key} {error_rate} {size}", 
            "title": "Format:"
        }, 
        {
            "location": "/Commands/#description", 
            "text": "Creates an empty Bloom Filter with a given error ratio and initial capacity.\nThis command is useful if you intend to add many items to a Bloom Filter, \notherwise you can just use  BF.ADD  to add items. It will also create one for\nyou.  The initial size and error rate will dictate the performance and memory usage\nof the filter. In general, the higher the lower the error ratio (i.e. the lower\nthe tolerance for false positives) the greater the space consumption per\nfilter entry.", 
            "title": "Description:"
        }, 
        {
            "location": "/Commands/#parameters", 
            "text": "key : The key under which the filter is to be found  error_rate : The percentage of expected false positives to be tolerated.\n    The greater this number, the greater the memory consumption per item\n    and the more CPU usage per operation.  size : The number of entries you intend to to add to the filter.\n    Performance will begin to degrade after adding more items than this\n    number. The actual degradation will depend on how far the limit has\n    been exceeded. Performance will degrade linearly as the number of entries\n    grow exponentially.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/Commands/#complexity", 
            "text": "O(1)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Commands/#returns", 
            "text": "OK on success, error otherwise.", 
            "title": "Returns"
        }, 
        {
            "location": "/Commands/#bfadd", 
            "text": "", 
            "title": "BF.ADD"
        }, 
        {
            "location": "/Commands/#format_1", 
            "text": "BF.ADD {key} {item}", 
            "title": "Format"
        }, 
        {
            "location": "/Commands/#description_1", 
            "text": "Adds an item to the Bloom Filter, creating the filter if it does not yet exist.", 
            "title": "Description"
        }, 
        {
            "location": "/Commands/#parameters_1", 
            "text": "key : The name of the filter  item : The item to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Commands/#complexity_1", 
            "text": "O(log (size/capacity)).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Commands/#returns_1", 
            "text": "1 if the item was newly inserted, or 0 if it may have existed previously.", 
            "title": "Returns"
        }, 
        {
            "location": "/Commands/#bfmadd", 
            "text": "", 
            "title": "BF.MADD"
        }, 
        {
            "location": "/Commands/#format_2", 
            "text": "{key} {item} [item...]", 
            "title": "Format"
        }, 
        {
            "location": "/Commands/#description_2", 
            "text": "Adds one or more items to the Bloom Filter, creating the filter if it does not yet exist.\nThis command operates identally to  BF.ADD  except it allows multiple inputs and returns\nmultiple values.", 
            "title": "Description"
        }, 
        {
            "location": "/Commands/#parameters_2", 
            "text": "key : The name of the filter  items : One or more items to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Commands/#complexity_2", 
            "text": "O(log (size/capacity)).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Commands/#returns_2", 
            "text": "An array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.", 
            "title": "Returns"
        }, 
        {
            "location": "/Commands/#bfexists", 
            "text": "", 
            "title": "BF.EXISTS"
        }, 
        {
            "location": "/Commands/#format_3", 
            "text": "BF.EXISTS {key} {item}", 
            "title": "Format"
        }, 
        {
            "location": "/Commands/#description_3", 
            "text": "Check if an item may exists, or certainly does not exist in the Bloom Filter.", 
            "title": "Description"
        }, 
        {
            "location": "/Commands/#parameters_3", 
            "text": "key : the name of the filter  item : the item to check for", 
            "title": "Parameters"
        }, 
        {
            "location": "/Commands/#complexity_3", 
            "text": "O(log (size/capacity)).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Commands/#returns_3", 
            "text": "0 If the item certainly does not exist, 1 if the item may exist.", 
            "title": "Returns"
        }, 
        {
            "location": "/Commands/#bfmexists", 
            "text": "", 
            "title": "BF.MEXISTS"
        }, 
        {
            "location": "/Commands/#format_4", 
            "text": "BF.MEXISTS {key} {item} [item...]", 
            "title": "Format"
        }, 
        {
            "location": "/Commands/#description_4", 
            "text": "Check if one or more items exist, or certainly do not exist in the filter", 
            "title": "Description"
        }, 
        {
            "location": "/Commands/#parameters_4", 
            "text": "key : name of the filter  items : one or more items to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/Commands/#complexity_4", 
            "text": "O(log (size/capacity)).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Commands/#returns_4", 
            "text": "An array of boolean values (actually integers). A true value means the\ncorresponding item may exist in the filter, while a false value means it does not.", 
            "title": "Returns"
        }
    ]
}