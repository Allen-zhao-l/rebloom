{
    "docs": [
        {
            "location": "/", 
            "text": "ReBloom - Probablistic Datatypes Module for Redis\n\n\nThis module provides two datatypes, a Scalable Bloom Filter and a Cuckoo Filter.\nThese datatypes are used to determine (with a given degree of certainty) whether\nan item is present (or absent) from a collection.\n\n\nQuick Start Guide\n\n\n\n\nLaunch ReBloom with Docker\n\n\nUse Rebloom with redis-cli\n\n\n\n\nNote: You can also \nbuild and load the module\n yourself.\n\n\nYou can find a command reference in \nBloom Commands.md\n and\n\nCuckoo Commands\n\n\nLaunch ReBloom with Docker\n\n\ndocker run -p 6379:6379 --name redis-rebloom redislabs/rebloom:latest\n\n\n\n\n\nUse ReBloom with \nredis-cli\n\n\ndocker exec -it redis-rebloom bash\n\n# redis-cli\n# 127.0.0.1:6379\n \n\n\n\n\n\nStart a new bloom filter by adding a new item\n\n\n# 127.0.0.1:6379\n BF.ADD newFilter foo\n(integer) 1\n\n\n\n\n\nChecking if an item exists in the filter\n\n\n# 127.0.0.1:6379\n BF.EXISTS newFilter foo\n(integer) 1\n\n\n\n\n\nBuilding and Loading ReBloom\n\n\nIn order to use this module, build it using \nmake\n and load it into Redis.\n\n\nLoading\n\n\nInvoking redis with the module loaded\n\n\n$ redis-server --loadmodule /path/to/rebloom.so\n\n\n\n\n\nYou can find a command reference in \nBloom_Commands.md\n\nand \nCuckoo_Commands.md\n\n\nBuilding\n\n\nIn order to use this module, build it using \nmake\n and load it into Redis.\n\n\nModule Options\n\n\nYou can adjust the default error ratio and the initial filter size (for bloom filters)\nusing the \nERROR_RATE\n and \nINITIAL_SIZE\n options respectively when loading the\nmodule, e.g.\n\n\n$ redis-server --loadmodule /path/to/rebloom.so INITIAL_SIZE \n400\n ERROR_RATE \n0\n.004\n\n\n\n\n\nThe default error rate is \n0.01\n and the default initial capacity is \n100\n.\n\n\nBloom vs. Cuckoo\n\n\nBloom Filters typically exhibit better performance and scalability when inserting\nitems (so if you're often adding items to your dataset then Bloom may be ideal),\nwhereas Cuckoo Filters are quicker on check operations and also allow deletions.", 
            "title": "ReBloom"
        }, 
        {
            "location": "/#rebloom-probablistic-datatypes-module-for-redis", 
            "text": "This module provides two datatypes, a Scalable Bloom Filter and a Cuckoo Filter.\nThese datatypes are used to determine (with a given degree of certainty) whether\nan item is present (or absent) from a collection.", 
            "title": "ReBloom - Probablistic Datatypes Module for Redis"
        }, 
        {
            "location": "/#quick-start-guide", 
            "text": "Launch ReBloom with Docker  Use Rebloom with redis-cli   Note: You can also  build and load the module  yourself.  You can find a command reference in  Bloom Commands.md  and Cuckoo Commands", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/#launch-rebloom-with-docker", 
            "text": "docker run -p 6379:6379 --name redis-rebloom redislabs/rebloom:latest", 
            "title": "Launch ReBloom with Docker"
        }, 
        {
            "location": "/#use-rebloom-with-redis-cli", 
            "text": "docker exec -it redis-rebloom bash\n\n# redis-cli\n# 127.0.0.1:6379    Start a new bloom filter by adding a new item  # 127.0.0.1:6379  BF.ADD newFilter foo\n(integer) 1  Checking if an item exists in the filter  # 127.0.0.1:6379  BF.EXISTS newFilter foo\n(integer) 1", 
            "title": "Use ReBloom with redis-cli"
        }, 
        {
            "location": "/#building-and-loading-rebloom", 
            "text": "In order to use this module, build it using  make  and load it into Redis.", 
            "title": "Building and Loading ReBloom"
        }, 
        {
            "location": "/#loading", 
            "text": "Invoking redis with the module loaded  $ redis-server --loadmodule /path/to/rebloom.so  You can find a command reference in  Bloom_Commands.md \nand  Cuckoo_Commands.md", 
            "title": "Loading"
        }, 
        {
            "location": "/#building", 
            "text": "In order to use this module, build it using  make  and load it into Redis.", 
            "title": "Building"
        }, 
        {
            "location": "/#module-options", 
            "text": "You can adjust the default error ratio and the initial filter size (for bloom filters)\nusing the  ERROR_RATE  and  INITIAL_SIZE  options respectively when loading the\nmodule, e.g.  $ redis-server --loadmodule /path/to/rebloom.so INITIAL_SIZE  400  ERROR_RATE  0 .004  The default error rate is  0.01  and the default initial capacity is  100 .", 
            "title": "Module Options"
        }, 
        {
            "location": "/#bloom-vs-cuckoo", 
            "text": "Bloom Filters typically exhibit better performance and scalability when inserting\nitems (so if you're often adding items to your dataset then Bloom may be ideal),\nwhereas Cuckoo Filters are quicker on check operations and also allow deletions.", 
            "title": "Bloom vs. Cuckoo"
        }, 
        {
            "location": "/Quick_Start/", 
            "text": "Quick Start Guide for ReBloom\n\n\nBloom filters and cuckoo filters work fairly similarly at the API level; they\nboth allow you to add items to a set (in effect making sure the item has been\n'seen' by the set).\n\n\nBuilding and running\n\n\ngit clone https://github.com/RedisLabsModules/rebloom.git\n\ncd\n rebloom\nmake\n\n\n# Assuming you have a redis build from the unstable branch:\n\n/path/to/redis-server --loadmodule ./rebloom.so\n\n\n\n\n\nBloom Filters\n\n\nBloom: Adding new items to the filter\n\n\n\n\nA new filter is created for you if it does not yet exist\n\n\n\n\n127.0.0.1:6379\n BF.ADD newFilter foo\n(integer) 1\n\n\n\n\n\nBloom: Checking if an item exists in the filter\n\n\n127.0.0.1:6379\n BF.EXISTS newFilter foo\n(integer) 1\n\n\n\n\n\n127.0.0.1:6379\n BF.EXISTS newFilter notpresent\n(integer) 0\n\n\n\n\n\nBloom: Adding and checking multiple items\n\n\n127.0.0.1:6379\n BF.MADD myFilter foo bar baz\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n\n\n\n\n\n127.0.0.1:6379\n BF.MEXISTS myFilter foo nonexist bar\n1) (integer) 1\n2) (integer) 0\n3) (integer) 1\n\n\n\n\n\nBloom: Creating a new filter with custom properties\n\n\n127.0.0.1:6379\n BF.RESERVE customFilter 0.0001 600000\nOK\n\n\n\n\n\n127.0.0.1:6379\n BF.MADD customFilter foo bar baz\n\n\n\n\n\nCuckoo Filters\n\n\nCuckoo: Adding new items to a filter\n\n\n\n\nA new filter is created for you if it does not yet exist\n\n\n\n\n127.0.0.1:6379\n CF.ADD newFilter foo\n(integer) 1\n\n\n\n\n\nYou can add the item multiple times. The filter will attempt to count it.\n\n\nCuckoo: Checking whether item exists\n\n\n127.0.0.1:6379\n CF.EXISTS newFilter foo\n(integer) 1\n\n\n\n\n\n127.0.0.1:6379\n CF.EXISTS newFilter notpresent\n(integer) 0\n\n\n\n\n\nCuckoo: Deleting item from filter\n\n\n127.0.0.1:6379\n CF.DEL newFilter foo\n(integer) 1", 
            "title": "Quick Start"
        }, 
        {
            "location": "/Quick_Start/#quick-start-guide-for-rebloom", 
            "text": "Bloom filters and cuckoo filters work fairly similarly at the API level; they\nboth allow you to add items to a set (in effect making sure the item has been\n'seen' by the set).", 
            "title": "Quick Start Guide for ReBloom"
        }, 
        {
            "location": "/Quick_Start/#building-and-running", 
            "text": "git clone https://github.com/RedisLabsModules/rebloom.git cd  rebloom\nmake # Assuming you have a redis build from the unstable branch: \n/path/to/redis-server --loadmodule ./rebloom.so", 
            "title": "Building and running"
        }, 
        {
            "location": "/Quick_Start/#bloom-filters", 
            "text": "", 
            "title": "Bloom Filters"
        }, 
        {
            "location": "/Quick_Start/#bloom-adding-new-items-to-the-filter", 
            "text": "A new filter is created for you if it does not yet exist   127.0.0.1:6379  BF.ADD newFilter foo\n(integer) 1", 
            "title": "Bloom: Adding new items to the filter"
        }, 
        {
            "location": "/Quick_Start/#bloom-checking-if-an-item-exists-in-the-filter", 
            "text": "127.0.0.1:6379  BF.EXISTS newFilter foo\n(integer) 1  127.0.0.1:6379  BF.EXISTS newFilter notpresent\n(integer) 0", 
            "title": "Bloom: Checking if an item exists in the filter"
        }, 
        {
            "location": "/Quick_Start/#bloom-adding-and-checking-multiple-items", 
            "text": "127.0.0.1:6379  BF.MADD myFilter foo bar baz\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1  127.0.0.1:6379  BF.MEXISTS myFilter foo nonexist bar\n1) (integer) 1\n2) (integer) 0\n3) (integer) 1", 
            "title": "Bloom: Adding and checking multiple items"
        }, 
        {
            "location": "/Quick_Start/#bloom-creating-a-new-filter-with-custom-properties", 
            "text": "127.0.0.1:6379  BF.RESERVE customFilter 0.0001 600000\nOK  127.0.0.1:6379  BF.MADD customFilter foo bar baz", 
            "title": "Bloom: Creating a new filter with custom properties"
        }, 
        {
            "location": "/Quick_Start/#cuckoo-filters", 
            "text": "", 
            "title": "Cuckoo Filters"
        }, 
        {
            "location": "/Quick_Start/#cuckoo-adding-new-items-to-a-filter", 
            "text": "A new filter is created for you if it does not yet exist   127.0.0.1:6379  CF.ADD newFilter foo\n(integer) 1  You can add the item multiple times. The filter will attempt to count it.", 
            "title": "Cuckoo: Adding new items to a filter"
        }, 
        {
            "location": "/Quick_Start/#cuckoo-checking-whether-item-exists", 
            "text": "127.0.0.1:6379  CF.EXISTS newFilter foo\n(integer) 1  127.0.0.1:6379  CF.EXISTS newFilter notpresent\n(integer) 0", 
            "title": "Cuckoo: Checking whether item exists"
        }, 
        {
            "location": "/Quick_Start/#cuckoo-deleting-item-from-filter", 
            "text": "127.0.0.1:6379  CF.DEL newFilter foo\n(integer) 1", 
            "title": "Cuckoo: Deleting item from filter"
        }, 
        {
            "location": "/Bloom_Commands/", 
            "text": "ReBloom Bloom Filter Command Documentation\n\n\nBF.RESERVE\n\n\nFormat:\n\n\nBF.RESERVE {key} {error_rate} {size}\n\n\n\n\n\nDescription:\n\n\nCreates an empty Bloom Filter with a given desired error ratio and initial capacity.\nThis command is useful if you intend to add many items to a Bloom Filter, \notherwise you can just use \nBF.ADD\n to add items. It will also create a Bloom Filter for\nyou if one doesn't already exist.\n\n\nThe initial size and error rate will dictate the performance and memory usage\nof the filter. In general, the smaller the error rate (i.e. the lower\nthe tolerance for false positives) the greater the space consumption per\nfilter entry.\n\n\nParameters:\n\n\n\n\nkey\n: The key under which the filter is to be found\n\n\nerror_rate\n: The desired probability for false positives. This should\n    be a decimal value between 0 and 1. For example, for a desired false\n    positive rate of 0.1% (1 in 1000), error_rate should be set to 0.001.\n    The closer this number is to zero, the greater the memory consumption per\n    item and the more CPU usage per operation.\n\n\nsize\n: The number of entries you intend to add to the filter.\n    Performance will begin to degrade after adding more items than this\n    number. The actual degradation will depend on how far the limit has\n    been exceeded. Performance will degrade linearly as the number of entries\n    grow exponentially.\n\n\n\n\nComplexity\n\n\nO(1)\n\n\nReturns\n\n\nOK on success, error otherwise.\n\n\nBF.ADD\n\n\nFormat\n\n\nBF.ADD {key} {item}\n\n\n\n\n\nDescription\n\n\nAdds an item to the Bloom Filter, creating the filter if it does not yet exist.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to add\n\n\n\n\nComplexity\n\n\nO(log N).\n\n\nReturns\n\n\n\"1\" if the item was newly inserted, or \"0\" if it may have existed previously.\n\n\nBF.MADD\n\n\nFormat\n\n\n{key} {item} [item...]\n\n\n\n\n\nDescription\n\n\nAdds one or more items to the Bloom Filter, creating the filter if it does not yet exist.\nThis command operates identically to \nBF.ADD\n except it allows multiple inputs and returns\nmultiple values.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitems\n: One or more items to add\n\n\n\n\nComplexity\n\n\nO(log N).\n\n\nReturns\n\n\nAn array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.\n\n\nBF.INSERT\n\n\nBF.INSERT {key} [CAPACITY {cap}] [ERROR {error}] [NOCREATE] ITEMS {item...}\n\n\n\n\n\nDescription\n\n\nThis command will add one or more items to the bloom filter, by default creating\nit if it does not yet exist. There are several arguments which may be used to\nmodify this behavior.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nCAPACITY\n: If specified, should be followed by the desired capacity for the\n    filter to be created. This parameter is ignored if the filter already exists.\n    If the filter is automatically created and this parameter is absent, then the\n    default capacity (specified at the module-level) is used. See \nBF.RESERVE\n\n    for more information on the impacts of this value.\n\n\nERROR\n: If specified, should be followed by the the error ratio of the newly\n    created filter if it does not yet exist. If the filter is automatically\n    created and \nERROR\n is not specified then the default module-level error\n    rate is used. See \nBF.RESERVE\n for more information on the format of this\n    value.\n\n\nNOCREATE\n: If specified, indicates that the filter should not be created if\n    it does not already exist. If the filter does not yet exist, an error is\n    returned rather than creating it automatically. This may be used where a strict\n    separation between filter creation and filter addition is desired. It is an\n    error to specify \nNOCREATE\n together with either \nCAPACITY\n or \nERROR\n.\n\n\nITEMS\n: Indicates the beginning of the items to be added to the filter. This\n    parameter must be specified.\n\n\n\n\nExamples\n\n\nAdd three items to a filter, using default parameters if the filter does not already\nexist:\n\n\nBF.INSERT filter ITEMS foo bar baz\n\n\n\n\n\nAdd one item to a filter, specifying a capacity of 10000 to be used if it does not\nalready exist:\n\n\nBF.INSERT filter CAPACITY 10000 ITEMS hello world\n\n\n\n\n\nAdd 2 items to a filter, returning an error if the filter does not already exist\n\n\nBF.INSERT filter NOCREATE ITEMS foo bar\n\n\n\n\n\nComplexity\n\n\nO(log N).\n\n\nReturns\n\n\nAn array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.\n\n\nBF.EXISTS\n\n\nFormat\n\n\nBF.EXISTS {key} {item}\n\n\n\n\n\nDescription\n\n\nDetermines whether an item may exist in the Bloom Filter or not.\n\n\nParameters\n\n\n\n\nkey\n: the name of the filter\n\n\nitem\n: the item to check for\n\n\n\n\nComplexity\n\n\nO(log N).\n\n\nReturns\n\n\n\"0\" if the item certainly does not exist, \"1\" if the item may exist.\n\n\nBF.MEXISTS\n\n\nFormat\n\n\nBF.MEXISTS {key} {item} [item...]\n\n\n\n\n\nDescription\n\n\nDetermines if one or more items may exist in the filter or not.\n\n\nParameters\n\n\n\n\nkey\n: name of the filter\n\n\nitems\n: one or more items to check\n\n\n\n\nComplexity\n\n\nO(log N).\n\n\nReturns\n\n\nAn array of boolean values (actually integers). A true value means the\ncorresponding item may exist in the filter, while a false value means it does not.\n\n\nBF.SCANDUMP\n\n\nFormat\n\n\nBF.SCANDUMP {key} {iter}\n\n\n\n\n\nDescription\n\n\nBegins an incremental save of the bloom filter. This is useful for large bloom\nfilters which cannot fit into the normal \nSAVE\n and \nRESTORE\n model.\n\n\nThe first time this command is called, the value of \niter\n should be 0. This\ncommand will return successive \n(iter, data)\n pairs until \n(0, NULL)\n to\nindicate completion.\n\n\nA demonstration in python-flavored pseudocode:\n\n\nchunks = []\niter = 0\nwhile True:\n    iter, data = BF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    BF.LOADCHUNK(key, iter, data)\n\n\n\n\n\nParameters\n\n\n\n\nkey\n Name of the filter\n\n\niter\n Iterator value. This is either 0, or the iterator from a previous\n    invocation of this command\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\nAn array of \nIterator\n and \nData\n. The Iterator is passed as input to the next\ninvocation of \nSCANDUMP\n. If \nIterator\n is 0, then it means iteration has\ncompleted.\n\n\nThe iterator-data pair should also be passed to \nLOADCHUNK\n when restoring\nthe filter.\n\n\nBF.LOADCHUNK\n\n\nFormat\n\n\nBF.LOADCHUNK {key} {iter} {data}\n\n\n\n\n\nDescription\n\n\nRestores a filter previously saved using \nSCANDUMP\n. See the \nSCANDUMP\n command\nfor example usage.\n\n\nThis command will overwrite any bloom filter stored under \nkey\n. Ensure that\nthe bloom filter will not be modified between invocations.\n\n\nParameters\n\n\n\n\nkey\n Name of the key to restore\n\n\niter\n Iterator value associated with \ndata\n (returned by \nSCANDUMP\n)\n\n\ndata\n Current data chunk (returned by \nSCANDUMP\n)\n\n\n\n\nComplexity O\n\n\nO(log N)\n\n\nReturns\n\n\nOK\n on success, or an error on failure.", 
            "title": "Bloom Commands"
        }, 
        {
            "location": "/Bloom_Commands/#rebloom-bloom-filter-command-documentation", 
            "text": "", 
            "title": "ReBloom Bloom Filter Command Documentation"
        }, 
        {
            "location": "/Bloom_Commands/#bfreserve", 
            "text": "", 
            "title": "BF.RESERVE"
        }, 
        {
            "location": "/Bloom_Commands/#format", 
            "text": "BF.RESERVE {key} {error_rate} {size}", 
            "title": "Format:"
        }, 
        {
            "location": "/Bloom_Commands/#description", 
            "text": "Creates an empty Bloom Filter with a given desired error ratio and initial capacity.\nThis command is useful if you intend to add many items to a Bloom Filter, \notherwise you can just use  BF.ADD  to add items. It will also create a Bloom Filter for\nyou if one doesn't already exist.  The initial size and error rate will dictate the performance and memory usage\nof the filter. In general, the smaller the error rate (i.e. the lower\nthe tolerance for false positives) the greater the space consumption per\nfilter entry.", 
            "title": "Description:"
        }, 
        {
            "location": "/Bloom_Commands/#parameters", 
            "text": "key : The key under which the filter is to be found  error_rate : The desired probability for false positives. This should\n    be a decimal value between 0 and 1. For example, for a desired false\n    positive rate of 0.1% (1 in 1000), error_rate should be set to 0.001.\n    The closer this number is to zero, the greater the memory consumption per\n    item and the more CPU usage per operation.  size : The number of entries you intend to add to the filter.\n    Performance will begin to degrade after adding more items than this\n    number. The actual degradation will depend on how far the limit has\n    been exceeded. Performance will degrade linearly as the number of entries\n    grow exponentially.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/Bloom_Commands/#complexity", 
            "text": "O(1)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns", 
            "text": "OK on success, error otherwise.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfadd", 
            "text": "", 
            "title": "BF.ADD"
        }, 
        {
            "location": "/Bloom_Commands/#format_1", 
            "text": "BF.ADD {key} {item}", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_1", 
            "text": "Adds an item to the Bloom Filter, creating the filter if it does not yet exist.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_1", 
            "text": "key : The name of the filter  item : The item to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_1", 
            "text": "O(log N).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_1", 
            "text": "\"1\" if the item was newly inserted, or \"0\" if it may have existed previously.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfmadd", 
            "text": "", 
            "title": "BF.MADD"
        }, 
        {
            "location": "/Bloom_Commands/#format_2", 
            "text": "{key} {item} [item...]", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_2", 
            "text": "Adds one or more items to the Bloom Filter, creating the filter if it does not yet exist.\nThis command operates identically to  BF.ADD  except it allows multiple inputs and returns\nmultiple values.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_2", 
            "text": "key : The name of the filter  items : One or more items to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_2", 
            "text": "O(log N).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_2", 
            "text": "An array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfinsert", 
            "text": "BF.INSERT {key} [CAPACITY {cap}] [ERROR {error}] [NOCREATE] ITEMS {item...}", 
            "title": "BF.INSERT"
        }, 
        {
            "location": "/Bloom_Commands/#description_3", 
            "text": "This command will add one or more items to the bloom filter, by default creating\nit if it does not yet exist. There are several arguments which may be used to\nmodify this behavior.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_3", 
            "text": "key : The name of the filter  CAPACITY : If specified, should be followed by the desired capacity for the\n    filter to be created. This parameter is ignored if the filter already exists.\n    If the filter is automatically created and this parameter is absent, then the\n    default capacity (specified at the module-level) is used. See  BF.RESERVE \n    for more information on the impacts of this value.  ERROR : If specified, should be followed by the the error ratio of the newly\n    created filter if it does not yet exist. If the filter is automatically\n    created and  ERROR  is not specified then the default module-level error\n    rate is used. See  BF.RESERVE  for more information on the format of this\n    value.  NOCREATE : If specified, indicates that the filter should not be created if\n    it does not already exist. If the filter does not yet exist, an error is\n    returned rather than creating it automatically. This may be used where a strict\n    separation between filter creation and filter addition is desired. It is an\n    error to specify  NOCREATE  together with either  CAPACITY  or  ERROR .  ITEMS : Indicates the beginning of the items to be added to the filter. This\n    parameter must be specified.", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#examples", 
            "text": "Add three items to a filter, using default parameters if the filter does not already\nexist:  BF.INSERT filter ITEMS foo bar baz  Add one item to a filter, specifying a capacity of 10000 to be used if it does not\nalready exist:  BF.INSERT filter CAPACITY 10000 ITEMS hello world  Add 2 items to a filter, returning an error if the filter does not already exist  BF.INSERT filter NOCREATE ITEMS foo bar", 
            "title": "Examples"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_3", 
            "text": "O(log N).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_3", 
            "text": "An array of booleans (integers). Each element is either true or false depending\non whether the corresponding input element was newly added to the filter or may\nhave previously existed.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfexists", 
            "text": "", 
            "title": "BF.EXISTS"
        }, 
        {
            "location": "/Bloom_Commands/#format_3", 
            "text": "BF.EXISTS {key} {item}", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_4", 
            "text": "Determines whether an item may exist in the Bloom Filter or not.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_4", 
            "text": "key : the name of the filter  item : the item to check for", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_4", 
            "text": "O(log N).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_4", 
            "text": "\"0\" if the item certainly does not exist, \"1\" if the item may exist.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfmexists", 
            "text": "", 
            "title": "BF.MEXISTS"
        }, 
        {
            "location": "/Bloom_Commands/#format_4", 
            "text": "BF.MEXISTS {key} {item} [item...]", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_5", 
            "text": "Determines if one or more items may exist in the filter or not.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_5", 
            "text": "key : name of the filter  items : one or more items to check", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_5", 
            "text": "O(log N).", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_5", 
            "text": "An array of boolean values (actually integers). A true value means the\ncorresponding item may exist in the filter, while a false value means it does not.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfscandump", 
            "text": "", 
            "title": "BF.SCANDUMP"
        }, 
        {
            "location": "/Bloom_Commands/#format_5", 
            "text": "BF.SCANDUMP {key} {iter}", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_6", 
            "text": "Begins an incremental save of the bloom filter. This is useful for large bloom\nfilters which cannot fit into the normal  SAVE  and  RESTORE  model.  The first time this command is called, the value of  iter  should be 0. This\ncommand will return successive  (iter, data)  pairs until  (0, NULL)  to\nindicate completion.  A demonstration in python-flavored pseudocode:  chunks = []\niter = 0\nwhile True:\n    iter, data = BF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    BF.LOADCHUNK(key, iter, data)", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_6", 
            "text": "key  Name of the filter  iter  Iterator value. This is either 0, or the iterator from a previous\n    invocation of this command", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity_6", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Bloom_Commands/#returns_6", 
            "text": "An array of  Iterator  and  Data . The Iterator is passed as input to the next\ninvocation of  SCANDUMP . If  Iterator  is 0, then it means iteration has\ncompleted.  The iterator-data pair should also be passed to  LOADCHUNK  when restoring\nthe filter.", 
            "title": "Returns"
        }, 
        {
            "location": "/Bloom_Commands/#bfloadchunk", 
            "text": "", 
            "title": "BF.LOADCHUNK"
        }, 
        {
            "location": "/Bloom_Commands/#format_6", 
            "text": "BF.LOADCHUNK {key} {iter} {data}", 
            "title": "Format"
        }, 
        {
            "location": "/Bloom_Commands/#description_7", 
            "text": "Restores a filter previously saved using  SCANDUMP . See the  SCANDUMP  command\nfor example usage.  This command will overwrite any bloom filter stored under  key . Ensure that\nthe bloom filter will not be modified between invocations.", 
            "title": "Description"
        }, 
        {
            "location": "/Bloom_Commands/#parameters_7", 
            "text": "key  Name of the key to restore  iter  Iterator value associated with  data  (returned by  SCANDUMP )  data  Current data chunk (returned by  SCANDUMP )", 
            "title": "Parameters"
        }, 
        {
            "location": "/Bloom_Commands/#complexity-o", 
            "text": "O(log N)", 
            "title": "Complexity O"
        }, 
        {
            "location": "/Bloom_Commands/#returns_7", 
            "text": "OK  on success, or an error on failure.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/", 
            "text": "ReBloom Cuckoo Filter Documentation\n\n\nCF.RESERVE\n\n\nFormat:\n\n\nCF.RESERVE {key} {capacity}\n\n\n\n\n\nCreate an empty cuckoo filter with an initial capacity of {capacity} items.\nUnlike a bloom filter, the false positive rate is fixed at about 3%, depending\non how full the filter is.\n\n\nThe filter will auto-expand (at the cost of reduced performance) if the initial\ncapacity is exceeded, though the performance degradation is variable depending\non how far the capacity is exceeded. In general, the false positive rate will\nincrease by for every additional {capacity} items beyond initial capacity.\n\n\nParameters:\n\n\n\n\nkey\n: The key under which the filter is to be found\n\n\ncapacity\n: Estimated capacity for the filter.\n\n\n\n\nComplexity\n\n\nO(1)\n\n\nReturns\n\n\nOK on success, error otherwise\n\n\nCF.ADD\n\n\nCF.ADD {key} {item}\n\n\n\n\n\nDescription\n\n\nAdds an item to the cuckoo filter, creating the filter if it does not exist.\n\n\nCuckoo filters can contain the same item multiple times, and consider each insert\nto be separate. You can use \nCF.ADDNX\n to only add the item if it does not yet\nexist.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to add\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\n\"1\" on success, error otherwise.\n\n\nCF.ADDNX\n\n\nCF.ADDNX {key} {item}\n\n\n\n\n\nDescription\n\n\nAdds an item to a cuckoo filter if the item did not exist previously.\nSee documentation on \nCF.ADD\n for more information on this command.\n\n\nNote that this command may be slightly slower than \nCF.ADD\n because it must\nfirst check to see if the item exists.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to add\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\n\"1\" if the item was added to the filter, \"0\" if the item already exists.\n\n\nCF.INSERT\n\n\nCF.INSERTNX\n\n\nCF.INSERT {key} [CAPACITY {cap}] ITEMS {item ...}\nCF.INSERTNX {key} [CAPACITY {cap}] ITEMS {item ...}\n\n\n\n\n\nDescription\n\n\nAdds one or more items to a cuckoo filter, allowing the filter to be created\nwith a custom capacity if it does not yet exist.\n\n\nThese commands offers more flexibility over the \nADD\n and \nADDNX\n commands, at\nthe cost of more verbosity.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nCAPACITY\n: If specified, should be followed by the desired capacity of the\n    new filter, if this filter does not yet exist. If the filter already\n    exists, then this parameter is ignored. If the filter does not yet exist\n    and this parameter is \nnot\n specified, then the filter is created with the\n    module-level default capacity. See \nCF.RESERVE\n for more information on\n    cuckoo filter capacities.\n\n\nNOCREATE\n: If specified, prevent automatic filter creation if the filter\n    does not exist. Instead, an error will be returned if the filter does not\n    already exist. This option is mutually exclusive with \nCAPACITY\n.\n\n\nITEMS\n: Begin the list of items to add.\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\nAn array of booleans (as integers) corresponding to the items specified. Possible\nvalues for each element are:\n\n\n\n\n 0\n if the item was successfully inserted\n\n\n0\n if the item already existed \nand\n \nINSERTNX\n is used.\n\n\n0\n if an error ocurred\n\n\n\n\nNote that for \nCF.INSERT\n, unless an error occurred, the return value will always\nbe an array of \n0\n values.\n\n\nCF.EXISTS\n\n\nCF.EXISTS {key} {item}\n\n\n\n\n\nCheck if an item exists in a Cuckoo Filter\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to check for\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\n\"0\" if the item certainlty does not exist, \"1\" if the item may exist. Because this\nis a probablistic data structure, false positives (but not false negatives) may\nbe returned.\n\n\nCF.DEL\n\n\nCF.DEL {key} {item}\n\n\n\n\n\nDescription\n\n\nDeletes an item once from the filter. If the item exists only once, it will be\nremoved from the filter. If the item was added multiple times, it will still be\npresent.\n\n\n!!! danger \"\"\n    Deleting elements that are not in the filter may delete a different item,\n    resulting in false negatives!\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to delete from the filter\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\n\"1\" if the item has been deleted, \"0\" if the item was not found.\n\n\nCF.COUNT\n\n\nCF.COUNT {key} {item}\n\n\n\n\n\nDescription\n\n\nReturns the number of times an item may be in the filter. Because this is a\nprobablistic data structure, this may not necessarily be accurate.\n\n\nIf you simply want to know if an item exists in the filter, use \nCF.EXISTS\n, as\nthat function is more efficient for that purpose.\n\n\nParameters\n\n\n\n\nkey\n: The name of the filter\n\n\nitem\n: The item to count\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\nThe number of times the item exists in the filter\n\n\nCF.SCANDUMP\n\n\nFormat\n\n\nCF.SCANDUMP {key} {iter}\n\n\n\n\n\nDescription\n\n\nBegins an incremental save of the cuckoo filter. This is useful for large cuckoo\nfilters which cannot fit into the normal \nSAVE\n and \nRESTORE\n model.\n\n\nThe first time this command is called, the value of \niter\n should be 0. This\ncommand will return successive \n(iter, data)\n pairs until \n(0, NULL)\n to\nindicate completion.\n\n\nA demonstration in python-flavored pseudocode:\n\n\nchunks = []\niter = 0\nwhile True:\n    iter, data = CF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    CF.LOADCHUNK(key, iter, data)\n\n\n\n\n\nParameters\n\n\n\n\nkey\n Name of the filter\n\n\niter\n Iterator value. This is either 0, or the iterator from a previous\n    invocation of this command\n\n\n\n\nComplexity\n\n\nO(log N)\n\n\nReturns\n\n\nAn array of \nIterator\n and \nData\n. The Iterator is passed as input to the next\ninvocation of \nSCANDUMP\n. If \nIterator\n is 0, then it means iteration has\ncompleted.\n\n\nThe iterator-data pair should also be passed to \nLOADCHUNK\n when restoring\nthe filter.\n\n\nCF.LOADCHUNK\n\n\nFormat\n\n\nCF.LOADCHUNK {key} {iter} {data}\n\n\n\n\n\nDescription\n\n\nRestores a filter previously saved using \nSCANDUMP\n. See the \nSCANDUMP\n command\nfor example usage.\n\n\nThis command will overwrite any cuckoo filter stored under \nkey\n. Ensure that\nthe cuckoo filter will not be modified between invocations.\n\n\nParameters\n\n\n\n\nkey\n Name of the key to restore\n\n\niter\n Iterator value associated with \ndata\n (returned by \nSCANDUMP\n)\n\n\ndata\n Current data chunk (returned by \nSCANDUMP\n)\n\n\n\n\nComplexity O\n\n\nO(log N)\n\n\nReturns\n\n\nOK\n on success, or an error on failure.", 
            "title": "Cuckoo Filter Commands"
        }, 
        {
            "location": "/Cuckoo_Commands/#rebloom-cuckoo-filter-documentation", 
            "text": "", 
            "title": "ReBloom Cuckoo Filter Documentation"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfreserve", 
            "text": "", 
            "title": "CF.RESERVE"
        }, 
        {
            "location": "/Cuckoo_Commands/#format", 
            "text": "CF.RESERVE {key} {capacity}  Create an empty cuckoo filter with an initial capacity of {capacity} items.\nUnlike a bloom filter, the false positive rate is fixed at about 3%, depending\non how full the filter is.  The filter will auto-expand (at the cost of reduced performance) if the initial\ncapacity is exceeded, though the performance degradation is variable depending\non how far the capacity is exceeded. In general, the false positive rate will\nincrease by for every additional {capacity} items beyond initial capacity.", 
            "title": "Format:"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters", 
            "text": "key : The key under which the filter is to be found  capacity : Estimated capacity for the filter.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity", 
            "text": "O(1)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns", 
            "text": "OK on success, error otherwise", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfadd", 
            "text": "CF.ADD {key} {item}", 
            "title": "CF.ADD"
        }, 
        {
            "location": "/Cuckoo_Commands/#description", 
            "text": "Adds an item to the cuckoo filter, creating the filter if it does not exist.  Cuckoo filters can contain the same item multiple times, and consider each insert\nto be separate. You can use  CF.ADDNX  to only add the item if it does not yet\nexist.", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_1", 
            "text": "key : The name of the filter  item : The item to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_1", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_1", 
            "text": "\"1\" on success, error otherwise.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfaddnx", 
            "text": "CF.ADDNX {key} {item}", 
            "title": "CF.ADDNX"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_1", 
            "text": "Adds an item to a cuckoo filter if the item did not exist previously.\nSee documentation on  CF.ADD  for more information on this command.  Note that this command may be slightly slower than  CF.ADD  because it must\nfirst check to see if the item exists.", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_2", 
            "text": "key : The name of the filter  item : The item to add", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_2", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_2", 
            "text": "\"1\" if the item was added to the filter, \"0\" if the item already exists.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfinsert", 
            "text": "", 
            "title": "CF.INSERT"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfinsertnx", 
            "text": "CF.INSERT {key} [CAPACITY {cap}] ITEMS {item ...}\nCF.INSERTNX {key} [CAPACITY {cap}] ITEMS {item ...}", 
            "title": "CF.INSERTNX"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_2", 
            "text": "Adds one or more items to a cuckoo filter, allowing the filter to be created\nwith a custom capacity if it does not yet exist.  These commands offers more flexibility over the  ADD  and  ADDNX  commands, at\nthe cost of more verbosity.", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_3", 
            "text": "key : The name of the filter  CAPACITY : If specified, should be followed by the desired capacity of the\n    new filter, if this filter does not yet exist. If the filter already\n    exists, then this parameter is ignored. If the filter does not yet exist\n    and this parameter is  not  specified, then the filter is created with the\n    module-level default capacity. See  CF.RESERVE  for more information on\n    cuckoo filter capacities.  NOCREATE : If specified, prevent automatic filter creation if the filter\n    does not exist. Instead, an error will be returned if the filter does not\n    already exist. This option is mutually exclusive with  CAPACITY .  ITEMS : Begin the list of items to add.", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_3", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_3", 
            "text": "An array of booleans (as integers) corresponding to the items specified. Possible\nvalues for each element are:    0  if the item was successfully inserted  0  if the item already existed  and   INSERTNX  is used.  0  if an error ocurred   Note that for  CF.INSERT , unless an error occurred, the return value will always\nbe an array of  0  values.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfexists", 
            "text": "CF.EXISTS {key} {item}  Check if an item exists in a Cuckoo Filter", 
            "title": "CF.EXISTS"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_4", 
            "text": "key : The name of the filter  item : The item to check for", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_4", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_4", 
            "text": "\"0\" if the item certainlty does not exist, \"1\" if the item may exist. Because this\nis a probablistic data structure, false positives (but not false negatives) may\nbe returned.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfdel", 
            "text": "CF.DEL {key} {item}", 
            "title": "CF.DEL"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_3", 
            "text": "Deletes an item once from the filter. If the item exists only once, it will be\nremoved from the filter. If the item was added multiple times, it will still be\npresent.  !!! danger \"\"\n    Deleting elements that are not in the filter may delete a different item,\n    resulting in false negatives!", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_5", 
            "text": "key : The name of the filter  item : The item to delete from the filter", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_5", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_5", 
            "text": "\"1\" if the item has been deleted, \"0\" if the item was not found.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfcount", 
            "text": "CF.COUNT {key} {item}", 
            "title": "CF.COUNT"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_4", 
            "text": "Returns the number of times an item may be in the filter. Because this is a\nprobablistic data structure, this may not necessarily be accurate.  If you simply want to know if an item exists in the filter, use  CF.EXISTS , as\nthat function is more efficient for that purpose.", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_6", 
            "text": "key : The name of the filter  item : The item to count", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_6", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_6", 
            "text": "The number of times the item exists in the filter", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfscandump", 
            "text": "", 
            "title": "CF.SCANDUMP"
        }, 
        {
            "location": "/Cuckoo_Commands/#format_1", 
            "text": "CF.SCANDUMP {key} {iter}", 
            "title": "Format"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_5", 
            "text": "Begins an incremental save of the cuckoo filter. This is useful for large cuckoo\nfilters which cannot fit into the normal  SAVE  and  RESTORE  model.  The first time this command is called, the value of  iter  should be 0. This\ncommand will return successive  (iter, data)  pairs until  (0, NULL)  to\nindicate completion.  A demonstration in python-flavored pseudocode:  chunks = []\niter = 0\nwhile True:\n    iter, data = CF.SCANDUMP(key, iter)\n    if iter == 0:\n        break\n    else:\n        chunks.append([iter, data])\n\n# Load it back\nfor chunk in chunks:\n    iter, data = chunk\n    CF.LOADCHUNK(key, iter, data)", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_7", 
            "text": "key  Name of the filter  iter  Iterator value. This is either 0, or the iterator from a previous\n    invocation of this command", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity_7", 
            "text": "O(log N)", 
            "title": "Complexity"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_7", 
            "text": "An array of  Iterator  and  Data . The Iterator is passed as input to the next\ninvocation of  SCANDUMP . If  Iterator  is 0, then it means iteration has\ncompleted.  The iterator-data pair should also be passed to  LOADCHUNK  when restoring\nthe filter.", 
            "title": "Returns"
        }, 
        {
            "location": "/Cuckoo_Commands/#cfloadchunk", 
            "text": "", 
            "title": "CF.LOADCHUNK"
        }, 
        {
            "location": "/Cuckoo_Commands/#format_2", 
            "text": "CF.LOADCHUNK {key} {iter} {data}", 
            "title": "Format"
        }, 
        {
            "location": "/Cuckoo_Commands/#description_6", 
            "text": "Restores a filter previously saved using  SCANDUMP . See the  SCANDUMP  command\nfor example usage.  This command will overwrite any cuckoo filter stored under  key . Ensure that\nthe cuckoo filter will not be modified between invocations.", 
            "title": "Description"
        }, 
        {
            "location": "/Cuckoo_Commands/#parameters_8", 
            "text": "key  Name of the key to restore  iter  Iterator value associated with  data  (returned by  SCANDUMP )  data  Current data chunk (returned by  SCANDUMP )", 
            "title": "Parameters"
        }, 
        {
            "location": "/Cuckoo_Commands/#complexity-o", 
            "text": "O(log N)", 
            "title": "Complexity O"
        }, 
        {
            "location": "/Cuckoo_Commands/#returns_8", 
            "text": "OK  on success, or an error on failure.", 
            "title": "Returns"
        }, 
        {
            "location": "/Java_Client/", 
            "text": "JReBloom\n\n\nA Java Client Library for \nReBloom\n\n\nOverview\n\n\nThis project contains a Java library abstracting the API of the ReBloom Redis module, that implements a high\nperfomance bloom filter with an easy-to-use API\n\n\nSee \nhttp://rebloom.io\n for installation instructions of the module.\n\n\nUsage example\n\n\nInitializing the client:\n\n\nimport\n \nio.rebloom.client.Client\n\n\n\nClient\n \nclient\n \n=\n \nnew\n \nClient\n(\nlocalhost\n,\n \n6378\n);\n\n\n\n\n\n\nAdding items to a bloom filter (created using default settings):\n\n\nclient\n.\nadd\n(\nsimpleBloom\n,\n \nMark\n);\n\n\n// Does \nMark\n now exist?\n\n\nclient\n.\nexists\n(\nsimpleBloom\n,\n \nMark\n);\n \n// true\n\n\nclient\n.\nexists\n(\nsimpleBloom\n,\n \nFarnsworth\n);\n \n// False\n\n\n\n\n\n\nUse multi-methods to add/check multiple items at once:\n\n\nclient\n.\naddMulti\n(\nsimpleBloom\n,\n \nfoo\n,\n \nbar\n,\n \nbaz\n,\n \nbat\n,\n \nbag\n);\n\n\n\n// Check if they exist:\n\n\nboolean\n[]\n \nrv\n \n=\n \nclient\n.\nexistsMulti\n(\nsimpleBloom\n,\n \nfoo\n,\n \nbar\n,\n \nbaz\n,\n \nbat\n,\n \nmark\n,\n \nnonexist\n);\n\n\n\n\n\n\nReserve a customized bloom filter:\n\n\nclient\n.\ncreateFilter\n(\nspecialBloom\n,\n \n10000\n,\n \n0.0001\n);\n\n\nclient\n.\nadd\n(\nspecialBloom\n,\n \nfoo\n);", 
            "title": "Java API"
        }, 
        {
            "location": "/Java_Client/#jrebloom", 
            "text": "A Java Client Library for  ReBloom", 
            "title": "JReBloom"
        }, 
        {
            "location": "/Java_Client/#overview", 
            "text": "This project contains a Java library abstracting the API of the ReBloom Redis module, that implements a high\nperfomance bloom filter with an easy-to-use API  See  http://rebloom.io  for installation instructions of the module.", 
            "title": "Overview"
        }, 
        {
            "location": "/Java_Client/#usage-example", 
            "text": "Initializing the client:  import   io.rebloom.client.Client  Client   client   =   new   Client ( localhost ,   6378 );   Adding items to a bloom filter (created using default settings):  client . add ( simpleBloom ,   Mark );  // Does  Mark  now exist?  client . exists ( simpleBloom ,   Mark );   // true  client . exists ( simpleBloom ,   Farnsworth );   // False   Use multi-methods to add/check multiple items at once:  client . addMulti ( simpleBloom ,   foo ,   bar ,   baz ,   bat ,   bag );  // Check if they exist:  boolean []   rv   =   client . existsMulti ( simpleBloom ,   foo ,   bar ,   baz ,   bat ,   mark ,   nonexist );   Reserve a customized bloom filter:  client . createFilter ( specialBloom ,   10000 ,   0.0001 );  client . add ( specialBloom ,   foo );", 
            "title": "Usage example"
        }
    ]
}